{"version":3,"sources":["theme/index.jsx","layout/MainContainer.jsx","components/DatePicker/index.jsx","views/index.jsx","serviceWorker.js","index.js"],"names":["Themes","Palletes","PinkPrimary","BrownChoco","GreyDarken","GreyShadow","GreySmooth","WhiteClean","FontSizes","xs","sm","md","lg","xl","Boxes","xxl","Shadows","boxShadows","Wrapper","styled","div","props","theme","Container","MainContainer","children","DatePicker","useState","pickedDate","setPickedDate","Date","prototype","addDays","days","dat","this","valueOf","setDate","getDate","datesData","startDate","stopDate","dateArray","currentDate","temp","day","moment","format","dayNumb","push","getDates","console","log","DateItem","button","disabled","actived","DateItemNumb","SlideWrapper","Slider","map","itm","key","onClick","e","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAqCeA,EAPA,CACbC,SA/Be,CACfC,YAAa,UACbC,WAAY,UACZC,WAAY,UACZC,WAAY,UACZC,WAAY,UACZC,WAAY,WA0BZC,UAvBgB,CAChBC,GAAI,MACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,QAmBJC,MAhBY,CACZL,GAAI,MACJC,GAAI,MACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJE,IAAK,QAWLC,QARc,CACdC,WAAY,uC,6QCtBd,IAAMC,EAAUC,IAAOC,IAAV,KAGG,SAACC,GAAD,OAAWA,EAAMC,MAAMrB,SAASM,cAG1CgB,EAAYJ,IAAOC,IAAV,KAkBAI,EAZO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpB,kBAAC,IAAD,CAAeH,MAAOtB,GACpB,kBAACkB,EAAD,KACE,kBAACK,EAAD,KAAYE,M,0iCCflB,IAmGeC,EAnGI,WAAO,IAAD,EACaC,mBAAS,GADtB,mBAChBC,EADgB,KACJC,EADI,KAGvBC,KAAKC,UAAUC,QAAU,SAAUC,GACjC,IAAIC,EAAM,IAAIJ,KAAKK,KAAKC,WAExB,OADAF,EAAIG,QAAQH,EAAII,UAAYL,GACrBC,GAkBT,IAIMK,EAnBN,SAAkBC,EAAWC,GAG3B,IAFA,IAAIC,EAAY,GACZC,EAAcH,EACXG,GAAeF,GAAU,CAC9B,IAAIG,EAAO,CACTC,IAAKC,IAAOH,GAAaI,OAAO,OAChCC,QAASF,IAAOH,GAAaI,OAAO,OAEtCL,EAAUO,KAAKL,GACfD,EAAcA,EAAYX,QAAQ,GAGpC,OAAOU,EAOSQ,CAAS,IAAIpB,MAAQ,IAAIA,MAAOE,QAAQ,KAE1DmB,QAAQC,IAAIb,GAEZ,IAAMc,EAAWlC,IAAOmC,OAAV,KAaF,SAACjC,GAAD,OAAWA,EAAMC,MAAMR,MAAMJ,MAC1B,SAACW,GAAD,OAAWA,EAAMC,MAAMd,UAAUE,MACrC,SAACW,GAAD,OACPA,EAAMkC,SACFlC,EAAMC,MAAMrB,SAASK,WACrBe,EAAMC,MAAMrB,SAASG,cAEzB,SAACiB,GAAD,OACAA,EAAMmC,SAAN,oCAEoBnC,EAAMC,MAAMrB,SAASG,WAFzC,2BAGSiB,EAAMC,MAAMrB,SAASM,WAH9B,cAMEkD,EAAetC,IAAOC,IAAV,KACH,SAACC,GAAD,OAAWA,EAAMC,MAAMd,UAAUI,MAG1C8C,EAAevC,IAAOC,IAAV,KAGZuC,EAASxC,IAAOC,IAAV,KAYZ,OACE,kBAAC,IAAD,CAAeE,MAAOtB,GACpB,kBAAC0D,EAAD,KACE,kBAACC,EAAD,KACGpB,EAAUqB,KAAI,SAACC,GAAD,OACb,kBAACR,EAAD,CACES,IAAKD,EAAIb,QACTO,SAAsB,QAAZM,EAAIhB,KAA6B,QAAZgB,EAAIhB,IACnCkB,SA9DSlB,EA8DYgB,EAAIb,QA9DR,SAACgB,GAC5BnC,EAAcgB,KA8DJW,QAASK,EAAIb,UAAYpB,GAEzB,6BAAMiC,EAAIhB,KACV,kBAACY,EAAD,KAAeI,EAAIb,UAlEX,IAACH,SCjBRoB,EARE,WACf,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.cf64316b.chunk.js","sourcesContent":["const Palletes = {\n  PinkPrimary: \"#f9423a\",\n  BrownChoco: \"#a23530\",\n  GreyDarken: \"#424749\",\n  GreyShadow: \"#6e7679\",\n  GreySmooth: \"#e2e4e4\",\n  WhiteClean: \"#f1f1f2\",\n};\n\nconst FontSizes = {\n  xs: \"8px\",\n  sm: \"12px\",\n  md: \"14px\",\n  lg: \"16px\",\n  xl: \"20px\",\n};\n\nconst Boxes = {\n  xs: \"4px\",\n  sm: \"8px\",\n  md: \"16px\",\n  lg: \"24px\",\n  xl: \"32px\",\n  xxl: \"40px\",\n};\n\nconst Shadows = {\n  boxShadows: \"0 8px 10px 0 rgba(10, 31, 68, 0.1)\",\n};\n\nconst Themes = {\n  Palletes,\n  FontSizes,\n  Boxes,\n  Shadows,\n};\n\nexport default Themes;\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport propTypes from \"prop-types\";\nimport Themes from \"../theme/\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  background: ${(props) => props.theme.Palletes.WhiteClean};\n`;\n\nconst Container = styled.div`\n  max-width: 768px;\n  width: 100%;\n  background: #ffffff;\n`;\n\nconst MainContainer = ({ children }) => (\n  <ThemeProvider theme={Themes}>\n    <Wrapper>\n      <Container>{children}</Container>\n    </Wrapper>\n  </ThemeProvider>\n);\n\nMainContainer.propTypes = {\n  children: propTypes.node.isRequired,\n};\n\nexport default MainContainer;\n","import React, { useState } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport moment from \"moment\";\nimport Themes from \"../../theme\";\n\nconst DatePicker = () => {\n  const [pickedDate, setPickedDate] = useState(0);\n\n  Date.prototype.addDays = function (days) {\n    var dat = new Date(this.valueOf());\n    dat.setDate(dat.getDate() + days);\n    return dat;\n  };\n\n  function getDates(startDate, stopDate) {\n    var dateArray = [];\n    var currentDate = startDate;\n    while (currentDate <= stopDate) {\n      var temp = {\n        day: moment(currentDate).format(\"ddd\"),\n        dayNumb: moment(currentDate).format(\"DD\"),\n      };\n      dateArray.push(temp);\n      currentDate = currentDate.addDays(1);\n    }\n\n    return dateArray;\n  }\n\n  const handleClick = (day) => (e) => {\n    setPickedDate(day);\n  };\n\n  const datesData = getDates(new Date(), new Date().addDays(14));\n\n  console.log(datesData);\n\n  const DateItem = styled.button`\n    outline: none;\n    border: none;\n    transition: background-color 0.5s;\n    background: none;\n    border-radius: 100%;\n    height: 40px !important;\n    width: 40px !important;\n    min-width: 40px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    margin: ${(props) => props.theme.Boxes.sm};\n    font-size: ${(props) => props.theme.FontSizes.sm};\n    color: ${(props) =>\n      props.disabled\n        ? props.theme.Palletes.GreySmooth\n        : props.theme.Palletes.GreyDarken};\n    scroll-snap-align: start;\n    ${(props) =>\n      props.actived &&\n      `\n      background-color: ${props.theme.Palletes.GreyDarken};\n      color: ${props.theme.Palletes.WhiteClean};\n    `}\n  `;\n  const DateItemNumb = styled.div`\n    font-size: ${(props) => props.theme.FontSizes.lg};\n    font-weight: 600;\n  `;\n  const SlideWrapper = styled.div`\n    overflow-y: hidden;\n  `;\n  const Slider = styled.div`\n    scroll-snap-type: x mandatory;\n    -webkit-overflow-scrolling: touch;\n    display: flex;\n    overflow-x: scroll;\n    -ms-overflow-style: none; /* IE and Edge */\n    scrollbar-width: none; /* Firefox */\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  `;\n  return (\n    <ThemeProvider theme={Themes}>\n      <SlideWrapper>\n        <Slider>\n          {datesData.map((itm) => (\n            <DateItem\n              key={itm.dayNumb}\n              disabled={itm.day === \"Sat\" || itm.day === \"Sun\"}\n              onClick={handleClick(itm.dayNumb)}\n              actived={itm.dayNumb === pickedDate}\n            >\n              <div>{itm.day}</div>\n              <DateItemNumb>{itm.dayNumb}</DateItemNumb>\n            </DateItem>\n          ))}\n        </Slider>\n      </SlideWrapper>\n    </ThemeProvider>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport MainContainer from \"../layout/MainContainer\";\nimport DatePicker from \"../components/DatePicker\";\n\nconst HomePage = () => {\n  return (\n    <MainContainer>\n      <DatePicker />\n    </MainContainer>\n  );\n};\n\nexport default HomePage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport HomePage from \"./views\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HomePage />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}